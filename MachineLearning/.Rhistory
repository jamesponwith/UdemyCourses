print("Hello")
# Importing data set
dataset = read.csv('Data.csv')
# Taking care of missing data
dataset$Age = ifelse(is.na(dataset$Age),
ave(dataset$Age, FUN = funciton(x) mean(x, na.rm = TRUE)),
dataset$Age)
setwd("~/Desktop/UdemyCourses/MachineLearning")
# Importing data set
dataset = read.csv('Data.csv')
# Taking care of missing data
dataset$Age = ifelse(is.na(dataset$Age),
ave(dataset$Age, FUN = funciton(x) mean(x, na.rm = TRUE)),
dataset$Age)
# Importing data set
dataset = read.csv('Data.csv')
view(dataset)
View(dataset)
dataset$Age = ifelse(is.na(dataset$Age),
ave(dataset$Age, FUN = funciton(x) mean(x, na.rm = TRUE)),
dataset$Age)
# Taking care of missing data
dataset$Age = ifelse(is.na(dataset$Age),
ave(dataset$Age, FUN = function(x) mean(x, na.rm = TRUE)),
dataset$Age)
View(dataset)
dataset$Salary = ifelse(is.na(dataset$Salary),
ave(dataset$Salary, FUN = function(x) mean(x, na.rm = TRUE)),
dataset$Salary)
dataset$Country = factor(Country,
levels = c('France', 'Spain', 'Germany'),
labels = c(1, 2, 3))
dataset = read.csv('Data.csv')
# Taking care of missing data
dataset$Age = ifelse(is.na(dataset$Age),
ave(dataset$Age, FUN = function(x) mean(x, na.rm = TRUE)),
dataset$Age)
dataset$Salary = ifelse(is.na(dataset$Salary),
ave(dataset$Salary, FUN = function(x) mean(x, na.rm = TRUE)),
dataset$Salary)
# Encoding Catagorical Data
dataset$Country = factor(Country,
levels = c('France', 'Spain', 'Germany'),
labels = c(1, 2, 3))
View(dataset)
dataset$Country = factor(dataset$Country,
levels = c('France', 'Spain', 'Germany'),
labels = c(1, 2, 3))
dataset$Purchased = factor(dataset$Purchased,
levels = c('No', 'Yes'),
labels = c(0, 1))
install.packages('caTools')
library("caTools", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
detach("package:caTools", unload=TRUE)
set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = 0.8) # input % towards training
library(caTools)
set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = 0.8) # input % towards training
split
training_set = subset(dataset, split == TRUE)
testing_set = subset(dataset, split == FALSE)
training_set[, 2:3] = scale(training_set[, 2:3])
test_set[, 2:3] = scale(test_set[, 2:3])
# Feature Scaling
training_set[, 2:3] = scale(training_set[, 2:3])
testing_set[, 2:3] = scale(test_set[, 2:3])
# Feature Scaling
training_set[, 2:3] = scale(training_set[, 2:3])
testing_set[, 2:3] = scale(test_seting[, 2:3])
# Feature Scaling
training_set[, 2:3] = scale(training_set[, 2:3])
testing_set[, 2:3] = scale(testing_set[, 2:3])
View(training_set)
View(testing_set)
